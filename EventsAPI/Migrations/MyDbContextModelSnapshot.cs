// <auto-generated />
using System;
using EventsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EventsAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSpots")
                        .HasColumnType("int")
                        .HasColumnName("availableSpots");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int")
                        .HasColumnName("max_capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSpots = 500,
                            Date = new DateOnly(2024, 12, 13),
                            Description = "live music concert with local bands",
                            ImageUrl = "https://example.com/concert.jpg",
                            Location = "downtown arena",
                            MaxCapacity = 500,
                            Name = "concert",
                            Status = "active",
                            Time = new TimeOnly(19, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AvailableSpots = 50,
                            Date = new DateOnly(2024, 11, 23),
                            Description = "workshop on web development using .net",
                            ImageUrl = "https://example.com/workshop.jpg",
                            Location = "tech hub",
                            MaxCapacity = 50,
                            Name = "workshop",
                            Status = "active",
                            Time = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AvailableSpots = 1000,
                            Date = new DateOnly(2025, 1, 12),
                            Description = "annual tech conference featuring keynote speakers",
                            ImageUrl = "https://example.com/conference.jpg",
                            Location = "grand hall",
                            MaxCapacity = 1000,
                            Name = "conference",
                            Status = "active",
                            Time = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AvailableSpots = 200,
                            Date = new DateOnly(2024, 12, 3),
                            Description = "networking event for professionals in tech",
                            ImageUrl = "https://example.com/networking.jpg",
                            Location = "city center",
                            MaxCapacity = 200,
                            Name = "networking event",
                            Status = "active",
                            Time = new TimeOnly(18, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AvailableSpots = 300,
                            Date = new DateOnly(2024, 11, 28),
                            Description = "a celebration of food from around the world",
                            ImageUrl = "https://example.com/foodfestival.jpg",
                            Location = "city park",
                            MaxCapacity = 300,
                            Name = "food festival",
                            Status = "active",
                            Time = new TimeOnly(12, 0, 0)
                        });
                });

            modelBuilder.Entity("EventsAPI.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            Status = "confirmed",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            Status = "confirmed",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            EventId = 3,
                            Status = "pending",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            EventId = 4,
                            Status = "confirmed",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            EventId = 5,
                            Status = "cancelled",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("EventsAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "juan.perez@email.com",
                            Name = "juan perez",
                            Password = "$2a$11$v3sV1Zc/leutNNZwvSt0z.3vXrCTTGo4Q2pJ1HuwAaCXp8DkTLv.O",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "maria.lopez@email.com",
                            Name = "maria lopez",
                            Password = "$2a$11$GU3pmeAKYlWQ8bFtdbPCZ./ephi3GpLWvh5rp8xNYLxm9vk7VnzVC",
                            Role = "User"
                        },
                        new
                        {
                            Id = 3,
                            Address = "carlos.gomez@email.com",
                            Name = "carlos gomez",
                            Password = "$2a$11$fC98T2K9Gp3/swox2N9GL.SY0QvhHdfmjMc6HK0..HX5e4aLki1l6",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Address = "ana.fernandez@email.com",
                            Name = "ana fernandez",
                            Password = "$2a$11$yHIgknMRVV5JAvSEk2JQUuK/lwV4sIUXNN.t3YYxb6RtEOsPcUU3G",
                            Role = "User"
                        },
                        new
                        {
                            Id = 5,
                            Address = "luis.torres@email.com",
                            Name = "luis torres",
                            Password = "$2a$11$4z279pBUfpM5DWpx/wOofetcr2U8dshmGBjt8dBwTNliKFJFA4Znq",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("EventsAPI.Models.Reservation", b =>
                {
                    b.HasOne("EventsAPI.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
