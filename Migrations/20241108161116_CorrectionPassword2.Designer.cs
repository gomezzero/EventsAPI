// <auto-generated />
using System;
using EventsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241108161116_CorrectionPassword2")]
    partial class CorrectionPassword2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EventsAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSpots")
                        .HasColumnType("int")
                        .HasColumnName("availableSpots");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("image_url");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int")
                        .HasColumnName("max_capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSpots = 500,
                            Date = new DateTime(2024, 12, 8, 11, 11, 15, 757, DateTimeKind.Local).AddTicks(8886),
                            Description = "Live music concert with local bands",
                            ImageUrl = "https://example.com/concert.jpg",
                            Location = "Downtown Arena",
                            MaxCapacity = 500,
                            Name = "Concert",
                            Status = "active",
                            Time = "19:00"
                        },
                        new
                        {
                            Id = 2,
                            AvailableSpots = 50,
                            Date = new DateTime(2024, 11, 18, 11, 11, 15, 757, DateTimeKind.Local).AddTicks(8915),
                            Description = "Workshop on web development using .NET",
                            ImageUrl = "https://example.com/workshop.jpg",
                            Location = "Tech Hub",
                            MaxCapacity = 50,
                            Name = "Workshop",
                            Status = "active",
                            Time = "09:00"
                        },
                        new
                        {
                            Id = 3,
                            AvailableSpots = 1000,
                            Date = new DateTime(2025, 1, 7, 11, 11, 15, 757, DateTimeKind.Local).AddTicks(8919),
                            Description = "Annual tech conference featuring keynote speakers",
                            ImageUrl = "https://example.com/conference.jpg",
                            Location = "Grand Hall",
                            MaxCapacity = 1000,
                            Name = "Conference",
                            Status = "active",
                            Time = "08:00"
                        },
                        new
                        {
                            Id = 4,
                            AvailableSpots = 200,
                            Date = new DateTime(2024, 11, 28, 11, 11, 15, 757, DateTimeKind.Local).AddTicks(8924),
                            Description = "Networking event for professionals in tech",
                            ImageUrl = "https://example.com/networking.jpg",
                            Location = "City Center",
                            MaxCapacity = 200,
                            Name = "Networking Event",
                            Status = "active",
                            Time = "18:00"
                        },
                        new
                        {
                            Id = 5,
                            AvailableSpots = 300,
                            Date = new DateTime(2024, 11, 23, 11, 11, 15, 757, DateTimeKind.Local).AddTicks(8928),
                            Description = "A celebration of food from around the world",
                            ImageUrl = "https://example.com/foodfestival.jpg",
                            Location = "City Park",
                            MaxCapacity = 300,
                            Name = "Food Festival",
                            Status = "active",
                            Time = "12:00"
                        });
                });

            modelBuilder.Entity("EventsAPI.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            Status = "confirmed",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            Status = "confirmed",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            EventId = 3,
                            Status = "confirmed",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            EventId = 4,
                            Status = "confirmed",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            EventId = 5,
                            Status = "confirmed",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("EventsAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("password");

                    b.Property<bool?>("Role")
                        .IsRequired()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "juan.perez@email.com",
                            Name = "jaun",
                            Password = "$2a$11$NCRdO6kYqO/zfiXkvVJWTeqUP9HIVRogg9gAgFI3TP6NFjUGbGDVu",
                            Role = true
                        },
                        new
                        {
                            Id = 2,
                            Address = "maria.lopez@email.com",
                            Name = "Maria Lopez",
                            Password = "$2a$11$bUMS8gviI1PnVKFMoyZ0ruHTRAoP2t6qA0QvJp0x5reOqr3Q2wnb.",
                            Role = false
                        },
                        new
                        {
                            Id = 3,
                            Address = "carlos.gomez@email.com",
                            Name = "Carlos Gomez",
                            Password = "$2a$11$nziVYwEKiGqXph5uxqm.cuVJuyhenu/r0dwYZI8j21xC1H6Wit8oK",
                            Role = true
                        },
                        new
                        {
                            Id = 4,
                            Address = "ana.fernandez@email.com",
                            Name = "Ana Fernandez",
                            Password = "$2a$11$HJyEcQZB6lzepbhsBsxn4OylBKFtTrcWlrR4K9RIBw3i7EUc.xrHy",
                            Role = true
                        },
                        new
                        {
                            Id = 5,
                            Address = "luis.torres@email.com",
                            Name = "Luis Torres",
                            Password = "$2a$11$RFENmIm0sB6BVYZnwBLwweOKvAE8auV9ao8ys/0DGFW7VvMNzWo6W",
                            Role = false
                        });
                });

            modelBuilder.Entity("EventsAPI.Models.Reservation", b =>
                {
                    b.HasOne("EventsAPI.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventsAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
